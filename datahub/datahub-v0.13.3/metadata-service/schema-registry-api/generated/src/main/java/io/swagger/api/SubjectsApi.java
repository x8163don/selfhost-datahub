/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.datahubproject.schema_registry.openapi.generated.ErrorMessage;
import io.datahubproject.schema_registry.openapi.generated.RegisterSchemaRequest;
import io.datahubproject.schema_registry.openapi.generated.RegisterSchemaResponse;
import io.datahubproject.schema_registry.openapi.generated.Schema;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
    date = "2022-12-20T16:52:36.517693Z[Europe/Lisbon]")
@Validated
public interface SubjectsApi {

  Logger log = LoggerFactory.getLogger(SubjectsApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  @Operation(
      summary = "Delete schema version",
      description =
          "Deletes a specific version of the schema registered under this subject. This only deletes the version and the schema ID remains intact making it still possible to decode data using the schema ID. This API is recommended to be used only in development environments or under extreme circumstances where-in, its required to delete a previously registered schema for compatibility purposes or re-register previously registered schema.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "Operation succeeded. Returns the schema version.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = Integer.class))),
        @ApiResponse(
            responseCode = "404",
            description =
                "Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "422",
            description = "Unprocessable Entity. Error code 42202 indicates an invalid version.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions/{version}",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.DELETE)
  default ResponseEntity<Integer> deleteSchemaVersion(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.PATH,
              description =
                  "Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string \"latest\". \"latest\" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("version")
          String version,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to perform a permanent delete",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "permanent", required = false)
          Boolean permanent) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("1", Integer.class), HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "Delete subject",
      description =
          "Deletes the specified subject and its associated compatibility level if registered. It is recommended to use this API only when a topic needs to be recycled or in development environment.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "Operation succeeded. Returns list of schema versions deleted",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    array =
                        @ArraySchema(
                            schema =
                                @io.swagger.v3.oas.annotations.media.Schema(
                                    implementation = Integer.class)))),
        @ApiResponse(
            responseCode = "404",
            description = "Not Found. Error code 40401 indicates subject not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.DELETE)
  default ResponseEntity<List<Integer>> deleteSubject(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to perform a permanent delete",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "permanent", required = false)
          Boolean permanent) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("[ 1, 1 ]", List.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "List schemas referencing a schema",
      description = "Retrieves the IDs of schemas that reference the specified schema.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "List of IDs for schemas that reference the specified schema.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    array =
                        @ArraySchema(
                            schema =
                                @io.swagger.v3.oas.annotations.media.Schema(
                                    implementation = Integer.class)))),
        @ApiResponse(
            responseCode = "404",
            description =
                "Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "422",
            description = "Unprocessable Entity. Error code 42202 indicates an invalid version.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions/{version}/referencedby",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.GET)
  default ResponseEntity<List<Integer>> getReferencedBy(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.PATH,
              description =
                  "Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string \"latest\". \"latest\" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("version")
          String version) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("[ 100001, 100001 ]", List.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "Get schema by version",
      description = "Retrieves a specific version of the schema registered under this subject.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "The schema.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = Schema.class))),
        @ApiResponse(
            responseCode = "404",
            description =
                "Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "422",
            description = "Unprocessable Entity. Error code 42202 indicates an invalid version.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions/{version}",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.GET)
  default ResponseEntity<Schema> getSchemaByVersion(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.PATH,
              description =
                  "Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string \"latest\". \"latest\" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("version")
          String version,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to include deleted schema",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deleted", required = false)
          Boolean deleted) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue(
                      "{\n  \"schema\" : \"{\"schema\": \"{\"type\": \"string\"}\"}\",\n  \"references\" : [ {\n    \"subject\" : \"User\",\n    \"name\" : \"io.confluent.kafka.example.User\",\n    \"version\" : 1\n  }, {\n    \"subject\" : \"User\",\n    \"name\" : \"io.confluent.kafka.example.User\",\n    \"version\" : 1\n  } ],\n  \"subject\" : \"User\",\n  \"schemaType\" : \"AVRO\",\n  \"id\" : 100001,\n  \"version\" : 1\n}",
                      Schema.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "Get schema string by version",
      description =
          "Retrieves the schema for the specified version of this subject. Only the unescaped schema string is returned.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "The schema string.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = String.class))),
        @ApiResponse(
            responseCode = "404",
            description =
                "Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "422",
            description = "Unprocessable Entity. Error code 42202 indicates an invalid version.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions/{version}/schema",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.GET)
  default ResponseEntity<String> getSchemaOnly2(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.PATH,
              description =
                  "Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string \"latest\". \"latest\" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("version")
          String version,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to include deleted schema",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deleted", required = false)
          Boolean deleted) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue("\"{\"schema\": \"{\"type\": \"string\"}\"}\"", String.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "List subjects",
      description = "Retrieves a list of registered subjects matching specified parameters.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "List of subjects matching the specified parameters.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    array =
                        @ArraySchema(
                            schema =
                                @io.swagger.v3.oas.annotations.media.Schema(
                                    implementation = String.class)))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.GET)
  default ResponseEntity<List<String>> list(
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Subject name prefix",
              schema = @io.swagger.v3.oas.annotations.media.Schema(defaultValue = ":*:"))
          @Valid
          @RequestParam(value = "subjectPrefix", required = false, defaultValue = ":*:")
          String subjectPrefix,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to look up deleted subjects",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deleted", required = false)
          Boolean deleted,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to return deleted subjects only",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deletedOnly", required = false)
          Boolean deletedOnly) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("[ \"User\", \"User\" ]", List.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "List versions under subject",
      description = "Retrieves a list of versions registered under the specified subject.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "List of version numbers matching the specified parameters.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    array =
                        @ArraySchema(
                            schema =
                                @io.swagger.v3.oas.annotations.media.Schema(
                                    implementation = Integer.class)))),
        @ApiResponse(
            responseCode = "404",
            description = "Not Found. Error code 40401 indicates subject not found. ",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      method = RequestMethod.GET)
  default ResponseEntity<List<Integer>> listVersions(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to include deleted schemas",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deleted", required = false)
          Boolean deleted,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to return deleted schemas only",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deletedOnly", required = false)
          Boolean deletedOnly) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("[ 1, 1 ]", List.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "Lookup schema under subject",
      description =
          "Check if a schema has already been registered under the specified subject. If so, this returns the schema string along with its globally unique identifier, its version under this subject and the subject name.",
      tags = {"Subjects (v1)"})
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "The schema.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = Schema.class))),
        @ApiResponse(
            responseCode = "404",
            description =
                "Not Found. Error code 40401 indicates subject not found. Error code 40403 indicates schema not found.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description = "Internal Server Error.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      consumes = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json",
        "application/json",
        "application/octet-stream"
      },
      method = RequestMethod.POST)
  default ResponseEntity<Schema> lookUpSchemaUnderSubject(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Subject under which the schema will be registered",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.DEFAULT,
              description = "Schema",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestBody
          RegisterSchemaRequest body,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to lookup the normalized schema",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "normalize", required = false)
          Boolean normalize,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to lookup deleted schemas",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "deleted", required = false)
          Boolean deleted) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue(
                      "{\n  \"schema\" : \"{\"schema\": \"{\"type\": \"string\"}\"}\",\n  \"references\" : [ {\n    \"subject\" : \"User\",\n    \"name\" : \"io.confluent.kafka.example.User\",\n    \"version\" : 1\n  }, {\n    \"subject\" : \"User\",\n    \"name\" : \"io.confluent.kafka.example.User\",\n    \"version\" : 1\n  } ],\n  \"subject\" : \"User\",\n  \"schemaType\" : \"AVRO\",\n  \"id\" : 100001,\n  \"version\" : 1\n}",
                      Schema.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(
      summary = "Register schema under a subject",
      description =
          "Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects. A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.",
      tags = {"Subjects (v1)"},
      hidden = true)
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "Schema successfully registered.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = RegisterSchemaResponse.class))),
        @ApiResponse(
            responseCode = "409",
            description = "Conflict. Incompatible schema.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "422",
            description =
                "Unprocessable entity. Error code 42201 indicates an invalid schema or schema type. ",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class))),
        @ApiResponse(
            responseCode = "500",
            description =
                "Internal Server Error. Error code 50001 indicates a failure in the backend data store.Error code 50002 indicates operation timed out. Error code 50003 indicates a failure forwarding the request to the primary.",
            content =
                @Content(
                    mediaType = "application/vnd.schemaregistry.v1+json",
                    schema =
                        @io.swagger.v3.oas.annotations.media.Schema(
                            implementation = ErrorMessage.class)))
      })
  @RequestMapping(
      value = "/subjects/{subject}/versions",
      produces = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json; qs=0.9",
        "application/json; qs=0.5"
      },
      consumes = {
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json",
        "application/json",
        "application/octet-stream"
      },
      method = RequestMethod.POST)
  default ResponseEntity<RegisterSchemaResponse> register(
      @Parameter(
              in = ParameterIn.PATH,
              description = "Name of the subject",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @PathVariable("subject")
          String subject,
      @Parameter(
              in = ParameterIn.DEFAULT,
              description = "Schema",
              required = true,
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestBody
          RegisterSchemaRequest body,
      @Parameter(
              in = ParameterIn.QUERY,
              description = "Whether to register the normalized schema",
              schema = @io.swagger.v3.oas.annotations.media.Schema())
          @Valid
          @RequestParam(value = "normalize", required = false)
          Boolean normalize) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue("{\n  \"id\" : 100001\n}", RegisterSchemaResponse.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SubjectsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
