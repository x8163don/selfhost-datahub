plugins {
  id 'war'
  id 'com.palantir.docker'
}

apply from: "../../gradle/versioning/versioning.gradle"

ext {
  docker_repo = 'datahub-gms'
}

ext.apiProject = project(':metadata-service:restli-api')

dependencies {
  implementation project(':metadata-service:factories')
  implementation project(':metadata-service:auth-filter')
  implementation project(':metadata-service:servlet')
  implementation project(':metadata-service:auth-servlet-impl')
  implementation project(':metadata-service:graphql-servlet-impl')
  implementation project(':metadata-service:openapi-servlet')
  implementation project(':metadata-service:openapi-entity-servlet')
  implementation project(':metadata-service:openapi-analytics-servlet')
  implementation project(':metadata-service:schema-registry-servlet')
  runtimeOnly project(':metadata-jobs:mce-consumer')
  runtimeOnly project(':metadata-jobs:mae-consumer')
  runtimeOnly project(':metadata-jobs:pe-consumer')

  runtimeOnly externalDependency.awsSecretsManagerJdbc
  runtimeOnly externalDependency.h2
  runtimeOnly externalDependency.mariadbConnector
  runtimeOnly externalDependency.mysqlConnector
  runtimeOnly externalDependency.postgresql
  implementation externalDependency.springWebMVC
  implementation externalDependency.springBootAutoconfigure
  implementation externalDependency.servletApi

  implementation spec.product.pegasus.restliDocgen
  implementation spec.product.pegasus.restliSpringBridge

  runtimeOnly externalDependency.log4jCore
  runtimeOnly externalDependency.log4j2Api
  runtimeOnly externalDependency.logbackClassic
  implementation externalDependency.awsMskIamAuth
  testRuntimeOnly externalDependency.logbackClassic
  implementation externalDependency.charle
}
configurations.all{
  exclude group: "com.charleskorn.kaml", module:"kaml"
  
}
configurations {
  jetty11
}

dependencies {
  jetty11 "org.eclipse.jetty:jetty-runner:11.0.19"
}

task run(type: JavaExec, dependsOn: build) {
  main = "org.eclipse.jetty.runner.Runner"
  args = ["${projectDir}/build/libs/war.war"]
  classpath configurations.jetty11
}

war {
  archiveFileName = "war.war"
}

docker {
  name "${docker_registry}/${docker_repo}:v${version}"
  version "v${version}"
  dockerfile file("${rootProject.projectDir}/docker/${docker_repo}/Dockerfile")
  files war.outputs.files
  files fileTree(rootProject.projectDir) {
    include '.dockerignore'
    include 'docker/monitoring/*'
    include "docker/${docker_repo}/*"
    include 'metadata-models/src/main/resources/*'
  }.exclude {
    i -> (!i.file.name.endsWith(".dockerignore") && i.file.isHidden())
  }
  tag("Debug", "${docker_registry}/${docker_repo}:debug")

  // platform('linux/arm64', 'linux/amd64')
  buildx(true)
  load(true)
  push(false)

  // Add build args if they are defined (needed for some CI or enterprise environments)
  def dockerBuildArgs = [:]
  if (project.hasProperty('alpineApkRepositoryUrl')) {
    dockerBuildArgs.ALPINE_REPO_URL = project.getProperty('alpineApkRepositoryUrl')
  }
  if (project.hasProperty('githubMirrorUrl')) {
    dockerBuildArgs.GITHUB_REPO_URL = project.getProperty('githubMirrorUrl')
  }
  if (project.hasProperty('mavenCentralRepositoryUrl')) {
    dockerBuildArgs.MAVEN_CENTRAL_REPO_URL = project.getProperty('mavenCentralRepositoryUrl')
  }

  if (dockerBuildArgs.size() > 0) {
    buildArgs(dockerBuildArgs)
  }
}
tasks.getByPath(":metadata-service:war:docker").dependsOn([build, war])

task cleanLocalDockerImages {
  doLast {
    rootProject.ext.cleanLocalDockerImages(docker_registry, docker_repo, "${version}")
  }
}
dockerClean.finalizedBy(cleanLocalDockerImages)
