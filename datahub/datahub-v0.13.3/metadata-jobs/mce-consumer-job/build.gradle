plugins {
    id 'org.springframework.boot'
    id 'java'
    id 'com.palantir.docker'
}

apply from: "../../gradle/versioning/versioning.gradle"

ext {
    docker_repo = 'datahub-mce-consumer'
}

dependencies {
    implementation project(':metadata-service:factories')
    implementation project(':metadata-service:auth-filter')
    implementation project(':metadata-jobs:mce-consumer')
    implementation project(':entity-registry')
    implementation project(':metadata-jobs:common')

    implementation(externalDependency.springBootStarterWeb) {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation externalDependency.springBootStarterJetty
    implementation externalDependency.springKafka
    implementation externalDependency.springBootAutoconfigure
    implementation externalDependency.springActuator
    implementation spec.product.pegasus.restliDocgen
    implementation spec.product.pegasus.restliSpringBridge
    implementation externalDependency.slf4jApi
    implementation externalDependency.log4j2Api
    compileOnly externalDependency.lombok
    implementation externalDependency.logbackClassic

    runtimeOnly externalDependency.mariadbConnector
    runtimeOnly externalDependency.mysqlConnector
    runtimeOnly externalDependency.postgresql

    annotationProcessor externalDependency.lombok

    testImplementation project(':metadata-dao-impl:kafka-producer')
    testImplementation project(':metadata-service:restli-client')
    testImplementation externalDependency.springBootTest
    testImplementation externalDependency.mockito
    testImplementation externalDependency.testng
}

bootJar {
    mainClass = 'com.linkedin.metadata.kafka.MceConsumerApplication'
    archiveFileName = "${project.name}.jar"

    // working around the restli error when it tries to open a jar within the spring boot fat jar
    requiresUnpack '**/restli-servlet-impl.jar'
}

docker {
    name "${docker_registry}/${docker_repo}:v${version}"
    version "v${version}"
    dockerfile file("${rootProject.projectDir}/docker/${docker_repo}/Dockerfile")
    files bootJar.outputs.files
    files fileTree(rootProject.projectDir) {
        include '.dockerignore'
        include 'docker/monitoring/*'
        include "docker/${docker_repo}/*"
        include 'metadata-models/src/main/resources/*'
    }.exclude {
        i -> (!i.file.name.endsWith(".dockerignore") && i.file.isHidden())
    }
    tag("Debug", "${docker_registry}/${docker_repo}:debug")

    // platform('linux/arm64', 'linux/amd64')
    buildx(true)
    load(true)
    push(false)

    // Add build args if they are defined (needed for some CI or enterprise environments)
    def dockerBuildArgs = [:]
    if (project.hasProperty('alpineApkRepositoryUrl')) {
        dockerBuildArgs.ALPINE_REPO_URL = project.getProperty('alpineApkRepositoryUrl')
    }
    if (project.hasProperty('githubMirrorUrl')) {
        dockerBuildArgs.GITHUB_REPO_URL = project.getProperty('githubMirrorUrl')
    }
    if (project.hasProperty('mavenCentralRepositoryUrl')) {
        dockerBuildArgs.MAVEN_CENTRAL_REPO_URL = project.getProperty('mavenCentralRepositoryUrl')
    }

    if (dockerBuildArgs.size() > 0) {
        buildArgs(dockerBuildArgs)
    }
}
tasks.getByPath(":metadata-jobs:mce-consumer-job:docker").dependsOn([bootJar])

task cleanLocalDockerImages {
    doLast {
        rootProject.ext.cleanLocalDockerImages(docker_registry, docker_repo, "${version}")
    }
}
dockerClean.finalizedBy(cleanLocalDockerImages)
