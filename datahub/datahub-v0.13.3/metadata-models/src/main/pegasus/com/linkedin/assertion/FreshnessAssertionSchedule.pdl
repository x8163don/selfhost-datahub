namespace com.linkedin.assertion

import com.linkedin.common.Urn

/**
* Attributes defining a single Freshness schedule.
*/
record FreshnessAssertionSchedule {

  /**
   * The type of a Freshness Assertion Schedule.
   *
   * Once we support data-time-relative schedules (e.g. schedules relative to time partitions),
   * we will add those schedule types here.
   */
  type: enum FreshnessAssertionScheduleType {
    /**
     * An highly configurable recurring schedule which describes the times of events described
     * by a CRON schedule, with the evaluation schedule assuming to be matching the cron schedule.
     *
     * In a CRON schedule type, we compute the look-back window to be the time between the last scheduled event
     * and the current event (evaluation time). This means that the evaluation schedule must match exactly
     * the schedule defined inside the cron schedule.
     *
     * For example, a CRON schedule defined as "0 8 * * *" would represent a schedule of "every day by 8am". Assuming
     * that the assertion evaluation schedule is defined to match this, the freshness assertion would be evaluated in the following way:
     *
     *     1. Compute the "last scheduled occurrence" of the event using the CRON schedule. For example, yesterday at 8am.
     *     2. Compute the bounds of a time window between the "last scheduled occurrence" (yesterday at 8am) until the "current occurrence" (today at 8am)
     *     3. Verify that the target event has occurred within the CRON-interval window.
     *     4. If the target event has occurred within the time window, then assertion passes.
     *     5. If the target event has not occurred within the time window, then the assertion fails.
     *
     */
    CRON
    /**
     * A fixed interval which is used to compute a look-back window for use when evaluating the assertion relative
     * to the Evaluation Time of the Assertion.
     *
     * To compute the valid look-back window, we subtract the fixed interval from the evaluation time. Then, we verify
     * that the target event has occurred within that window.
     *
     * For example, a fixed interval of "24h" would represent a schedule of "in the last 24 hours".
     * The 24 hour interval is relative to the evaluation time of the assertion. For example if we schedule the assertion
     * to be evaluated each hour, we'd compute the result as follows:
     *
     *     1. Subtract the fixed interval from the current time (Evaluation time) to compute the bounds of a fixed look-back window.
     *     2. Verify that the target event has occurred within the CRON-interval window.
     *     3. If the target event has occurred within the time window, then assertion passes.
     *     4. If the target event has not occurred within the time window, then the assertion fails.
     *
     */
    FIXED_INTERVAL
  }

  /**
   * A cron schedule. This field is required when type is CRON.
   */
  cron: optional FreshnessCronSchedule

  /**
   * A fixed interval schedule. This field is required when type is FIXED_INTERVAL.
   */
  fixedInterval: optional FixedIntervalSchedule

}