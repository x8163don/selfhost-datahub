extend type Mutation {
  """
  Create a new incident for a resource (asset)
  """
  raiseIncident(
    """
    Input required to create a new incident
    """
    input: RaiseIncidentInput!): String

  """
  Update an existing incident for a resource (asset)
  """
  updateIncidentStatus(
    """
    The urn for an existing incident
    """
    urn: String!

    """
    Input required to update the state of an existing incident
    """
    input: UpdateIncidentStatusInput!): Boolean
}

"""
A list of Incidents Associated with an Entity
"""
type EntityIncidentsResult {
  """
  The starting offset of the result set returned
  """
  start: Int!

  """
  The number of assertions in the returned result set
  """
  count: Int!

  """
  The total number of assertions in the result set
  """
  total: Int!

  """
  The incidents themselves
  """
  incidents: [Incident!]!
}

"""
An incident represents an active issue on a data asset.
"""
type Incident implements Entity {
  """
  The primary key of the Incident
  """
  urn: String!

  """
  The standard Entity Type
  """
  type: EntityType!

  """
  The type of incident
  """
  incidentType: IncidentType!

  """
  A custom type of incident. Present only if type is 'CUSTOM'
  """
  customType: String

  """
  An optional title associated with the incident
  """
  title: String

  """
  An optional description associated with the incident
  """
  description: String

  """
  The status of an incident
  """
  status: IncidentStatus!

  """
  Optional priority of the incident. Lower value indicates higher priority.
  """
  priority: Int

  """
  The entity that the incident is associated with.
  """
  entity: Entity!

  """
  The source of the incident, i.e. how it was generated
  """
  source: IncidentSource

  """
  The time at which the incident was initially created
  """
  created: AuditStamp!

  """
  List of relationships between the source Entity and some destination entities with a given types
  """
  relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
The state of an incident.
"""
enum IncidentState {
  """
  The incident is ongoing, or active.
  """
  ACTIVE
  """
  The incident is resolved.
  """
  RESOLVED
}

"""
A specific type of incident
"""
enum IncidentType {
  """
  An operational incident, e.g. failure to materialize a dataset, or failure to execute a task / pipeline.
  """
  OPERATIONAL

  """
  A custom type of incident
  """
  CUSTOM
}


"""
Details about the status of an asset incident
"""
type IncidentStatus {
  """
  The state of the incident
  """
  state: IncidentState!
  """
  An optional message associated with the status
  """
  message: String
  """
  The time that the status last changed
  """
  lastUpdated: AuditStamp!
}

"""
The source type of an incident, implying how it was created.
"""
enum IncidentSourceType {
  """
  The incident was created manually, from either the API or the UI.
  """
  MANUAL
}

"""
Details about the source of an incident, e.g. how it was created.
"""
type IncidentSource {
  """
  The type of the incident source
  """
  type: IncidentSourceType!

  """
  The source of the incident. If the source type is ASSERTION_FAILURE, this will have the assertion that generated the incident.
  """
  source: Entity
}

"""
Input required to create a new incident in the 'Active' state.
"""
input RaiseIncidentInput {
  """
  The type of incident
  """
  type: IncidentType!
  """
  A custom type of incident. Present only if type is 'CUSTOM'
  """
  customType: String
  """
  An optional title associated with the incident
  """
  title: String
  """
  An optional description associated with the incident
  """
  description: String
  """
  The resource (dataset, dashboard, chart, dataFlow, etc) that the incident is associated with.
  """
  resourceUrn: String!
  """
  The source of the incident, i.e. how it was generated
  """
  source: IncidentSourceInput
  """
  An optional priority for the incident. Lower value indicates a higher priority.
  """
  priority: Int
}

"""
Input required to create an incident source
"""
input IncidentSourceInput {
  """
  The type of the incident source
  """
  type: IncidentSourceType!
}

"""
Input required to update status of an existing incident
"""
input UpdateIncidentStatusInput {
  """
  The new state of the incident
  """
  state: IncidentState!
  """
  An optional message associated with the new state
  """
  message: String
}

extend type Dataset {
  """
  Incidents associated with the Dataset
  """
  incidents(
    """
    Optional incident state to filter by, defaults to any state.
    """
    state: IncidentState,
    """
    Optional start offset, defaults to 0.
    """
    start: Int,
    """
    Optional start offset, defaults to 20.
    """
    count: Int): EntityIncidentsResult
}

extend type DataJob {
  """
  Incidents associated with the DataJob
  """
  incidents(
    """
    Optional incident state to filter by, defaults to any state.
    """
    state: IncidentState,
    """
    Optional start offset, defaults to 0.
    """
    start: Int,
    """
    Optional start offset, defaults to 20.
    """
    count: Int): EntityIncidentsResult
}

extend type DataFlow {
  """
  Incidents associated with the DataFlow
  """
  incidents(
    """
    Optional incident state to filter by, defaults to any state.
    """
    state: IncidentState,
    """
    Optional start offset, defaults to 0.
    """
    start: Int,
    """
    Optional start offset, defaults to 20.
    """
    count: Int): EntityIncidentsResult
}

extend type Dashboard {
  """
  Incidents associated with the Dashboard
  """
  incidents(
    """
    Optional incident state to filter by, defaults to any state.
    """
    state: IncidentState,
    """
    Optional start offset, defaults to 0.
    """
    start: Int,
    """
    Optional start offset, defaults to 20.
    """
    count: Int): EntityIncidentsResult
}

extend type Chart {
  """
  Incidents associated with the Chart
  """
  incidents(
    """
    Optional incident state to filter by, defaults to any state.
    """
    state: IncidentState,
    """
    Optional start offset, defaults to 0.
    """
    start: Int,
    """
    Optional start offset, defaults to 20.
    """
    count: Int): EntityIncidentsResult
}